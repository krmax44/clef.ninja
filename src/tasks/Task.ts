import Clef from '@/utils/Clef';
import Note from '@/utils/Note';
import Instrument from '@/instruments/Instrument';
import InstrumentPiano from '@/instruments/InstrumentPiano';
import Houk from 'houk';

import { treble, clefs as CLEFS } from '@/utils/noteConstants';
import { StaveNote, Renderer } from '@/utils/VexHelper';
import { ExtendedVue } from 'vue/types/vue';

export interface TaskContext {
	target: HTMLElement;
	clefs?: Clef[];
	difficulty?: number;
	instrument?: Instrument;
}

export interface CheckResult {
	done: boolean;
	correctNotes: number[];
	correct: boolean;
	score?: boolean;
	retry?: boolean;
}

export default abstract class Tasks extends Houk {
	public notes: Note[][] = []; // notes generated by task -
	public clef: Clef = treble; // (randomly) chosen clef
	public clefs: Clef[]; // viable clefs chosen by player
	public instrument: Instrument; // selected instrument
	protected target: HTMLElement; // target HTML element to render stave
	public difficulty: number; // provided difficulty
	public helpText?: ExtendedVue<any, any, any, any, any>; // help text component

	constructor({ target, difficulty, instrument, clefs }: TaskContext) {
		super();

		this.target = target;
		this.difficulty = difficulty ?? 2;
		this.instrument = instrument ?? InstrumentPiano;
		this.clefs = clefs ?? CLEFS;
	}

	public staveNotes() {
		return this.notes.map(n => StaveNote(n));
	}

	public render() {
		Renderer.apply(this);
	}

	public check(_input: number): CheckResult {
		throw new Error("Can't check abstract task.");
	}
}
